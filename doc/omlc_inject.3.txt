omlc_inject(3)
==============

NAME
----
omlc_inject - inject a measurement sample into a measurement point

SYNOPSIS
--------
[verse]
*#include <oml2/omlc.h>*
[verse]
'int' *omlc_inject*('OmlMP' *mp, 'OmlValueU' *values);
'int' *omlc_inject_metadata*('OmlMP' *mp, 'const char' *key, 'const OmlValueU' *value, 'OmlValueT' type, 'const char' *fname);

DESCRIPTION
-----------

*omlc_inject*() takes a vector of values and injects them as a
measurement sample into a 'measurement point' (MP) previously defined
via a call to linkoml:omlc_add_mp[3]. If linkoml:omlc_inject[3] is called prior to
the start of measurement sampling, then it will be ignored.
Measurement sampling is initiated by a call to linkoml:omlc_start[3].

*omlc_inject_metadata*() injects a metadata 'key'/'value' pair about MP
'mp', and its optional field 'fname'. Unlike other data injected in an
MP, metadata is treated differently. It is sent along a specific
metadata 'measurement stream' (MS), and ends up being stored in the
timestamped '_experiment_metadata' table by the linkoml:oml2-server[1].
At the moment, the only valid 'type' for 'value' is 'OML_STRING_VALUE';
anything else will generate an error.

Prior to reading the following, it is worthy to note that
linkoml:oml-scaffold[1] can be used to generate custom registration and
injection helpers from a high-level description of an application's MPs.
This is sufficient for most applications, and avoids errors in
manipulating low-level data structures. This also provides some
abstraction from occasional API changes, and simplifies porting to newer
versions of OML. It is therefore the recommended approach for all
applications with static measurement points (i.e., not created
dynamically with variable MPs depending on run-time conditions, such as
specific instrumented plugin code).

The code generated by linkoml:oml-scaffold[1] follows the structure
described thereafter. The registration helpers create the 'OmlMPDef'
structures as exemplified below, and rely on linkoml:omlc_add_mp[3] to
register the MPs on behalf of the user (in linkoml:oml_register_mps[3]).
The injection helpers (see linkoml:oml_inject_MPNAME[3]) offer
C-functions with typed argument, and map them internally to 'OmlValueU'
before calling *omlc_inject*().

The 'mp' parameter must be an MP handle returned by a call
to linkoml:omlc_add_mp[3]. The 'values' array must contain values whose
number and types correspond to the types declared for the MP tuple in
the call to linkoml:omlc_add_mp[3]. The convenience macros *omlc_set_**()
should be used to set up the values vector.

For instance, suppose the following MP definition:

----
OmlMPDef mp_def [] =
{
  { "source", OML_UINT32_VALUE },
  { "destination", OML_UINT32_VALUE },
  { "length", OML_UINT32_VALUE },
  { "weight", OML_DOUBLE_VALUE },
  { "protocol", OML_STRING_VALUE },
  { NULL, (OmlValueT)0 } /* Sentinel value */
};
----

(See linkoml:omlc_add_mp[3] for details.)

To inject a measurement sample into this MP, the programmer must first
declare an 'OmlValueU' array with the right number of elements, in
this case five (the sentinel value is only needed when declaring the
MP to linkoml:omlc_add_mp[3], it doesn't play any further part).  Then, call
the value setting macros to load new values into the vector, and
finally pass the array to *omlc_inject*():

----
OmlMP *mp = omlc_add_mp ("myMP", mp_def);

...

omlc_start();

...

uint32_t source_id;
uint32_t destination_id;
uint32_t packet_length;
double weight;
char *protocol;

/* Some application-specific code to obtain new values for the variables above */

...

OmlValueU values[5];

omlc_zero_array(values, 5);

omlc_set_uint32 (values[0], source_id);
omlc_set_uint32 (values[1], destination_id);
omlc_set_uint32 (values[2], packet_length);
omlc_set_double (values[3], weight);
omlc_set_string (values[4], protocol);

omlc_reset_string(values[4]);

omlc_inject (mp, values);
----

Internally, the library guards each MP with a mutex, so this function
should be thread safe.

The caller must be careful to ensure that the 'values' array has
enough elements to accommodate the declared number of fields in the
tuple for the given 'mp'. Otherwise, *omlc_inject*() might try to read
past the end of the array. Similarly, the types of the values must be
as declared, and in the same order in the array as specified for the
MP tuple definition. This is particularly important for strings.

The values vector should be considered "write-only" and should only be
manipulated using the value-setting macros, see
linkoml:omlc_set_int32[3].

Once a call to *omlc_inject*() has been made, it is safe to modify/free
the values vector, as *omlc_inject*() creates internal copies.

RETURN VALUE
------------

These functions return 0 on success, or a negative value on error.

This is particularly the case if the library has not been initialized
with a call to linkoml:omlc_init[3], or if measurement sampling has not
been started with a call to linkoml:omlc_start[3]. It this case the
function exits, without performing any actions, with status -1.
Similarly, if either 'mp' or 'values' is NULL, then the function exits
with the same status.

BUGS
----
include::bugs.txt[]

SEE ALSO
--------
Manual Pages
~~~~~~~~~~~~
linkoml:oml2-server[1], linkoml:liboml2[1], linkoml:liboml2[3], linkoml:liboml2.conf[5]

linkoml:omlc_init[3], linkoml:omlc_add_mp[3], linkoml:omlc_start[3], linkoml:OmlValue[3]

include::manual.txt[]

// vim: ft=asciidoc:tw=72
