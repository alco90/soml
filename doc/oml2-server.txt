oml2-server(1)
==============

NAME
----
oml2-server - OML2 server daemon

SYNOPSIS
--------
[verse]
*oml2-server* [-D dir | --data-dir=dir] [-H hook | --event-hook=hook] 
	    [-l port | --listen=port] [--user=UID] [--group=GID]
	    [-d loglevel | --debug-level=loglevel] [--logfile=file]
ifdef::have_pg[]
	    [-b db | --backend=db] [--pg-user=user] [--pg-connect=conninfo]
endif::have_pg[]
	    [--usage] [--version | -v] [-? | --help]

DESCRIPTION
-----------

*oml2-server* (OML2 Server) is the daemon program for OML.  It
collects measurements from client applications and stores them in a
measurement database.

*oml2-server* listens for connections from clients.  It is normally
started at boot as a system service.  Each client declares which
experiment it belongs to (using the --oml-exp-id option of the
linkoml:liboml2 client library), and then sends a stream of
measurement packets.  The measurements for each client are stored in
the experiment database belonging to the client's experiment.

If the client declares that it belongs to experiment 'A', then
*oml2-server* will look for an existing experiment database named 'A'
and add measurement data to that database. Otherwise it will attempt
to create a new database of that name, initialize it for use, and
append new measurements to it.  Measurement streams from subsequent
clients for experiment 'A' will also be appended to the new database.

ifdef::have_pg[]
*oml2-server* can store measurements in either an SQLite3 database on
disk or in a PostgreSQL database.  See the '--backend' option for
details.
endif::have_pg[]

OPTIONS
-------
-D directory, --data-dir=directory::
	Store SQLite3 measurement databases for all experiments in the
	specified directory, when the SQLite3 backend is selected. The
	default on this system is {pkglocalstatedir}.  '--data-dir'
	overrides the *OML_SQLITE_DIR* environment variable.  If
	*oml2-server* is run with an effective user id that does not have
	the right to create files in the directory, the server will exit
	with an error message in its log file.  The SQLite3 database file
	name for an experiment is chosen by appending the suffix ".sq3" to
	the experiment name.

-H hook::
--event-hook=hook::
	Specify an external hook program to call on specific events.  This hook
	should take commands on 'stdin', and write reports on 'stdout'. The
	hook's 'stderr' is the same as the *oml2-server*'s.  When first started,
	it should identify itself to the *oml2-server* by printing the following
	banner line.
+
.................
OML HOOK READY
.................
+
It should then process its input in a loop, looking for the 
commands described in the following section. Apart from its banner, the
*omr2-server* does not currently read anything the hook program outputs
on its 'stdout'.
+
A simple example hook, *oml2-server-hook.sh*, is available in {pkgdatadir}.

-l port::
--listen=port::
	Listen for measurement client connections on the given
	port. The default port is 3003.

--user=UID, --group=GID::
	Try to change the server's user id and group id before starting to
	serve clients.  OML only needs access to a single directory in
	which it has the right to create the SQLite3 experiment database
	files, plus the right to open and write to its log file (creating
	it if necessary).  The '--user' and '--group' options allow the
	system administrator to run *oml2-server* under a non-privileged
	account, thereby lessening its potential as a security risk.  If
	only '--user' is given, the gid will be set to the primary group id
	for the given user. '--user' and '--group' accept user and group
	names as arguments; numeric user and group ids are not supported.

-d, --debug-level=level::
	Set the verbosity of log output to level. The level should be
	an integer from 1 to 4 (1=ERROR, 2=WARNING, 3=INFO, 4=DEBUG).
	The default log verbosity is 3, INFO.

--logfile=file::
	Output log messages to 'file' rather than 'stderr'.

ifdef::have_pg[]
-b db, --backend=db::
	Select which database backend to use for storing experiment
	databases. The default is 'sqlite' which stores databases as
	SQLite3 files.  The other option os 'postgresql' which will
	attempt to connect to a PostgreSQL database server.

--pg-user=user::
	Specify the PostgreSQL database user to use when the PostgreSQL
	database backend is selected.  The specified user must have the
	PostgreSQL CREATEDB role so that it can create a new database for
	each new experiment.

--pg-connect=conninfo::
	For the PostgreSQL backend, this option gives a way to control the
	database authentication scheme to use.  It is passed to the
	PostgreSQL connection API with the user name and database name
	appended.  For instance, for an experiment named "myexp" and
	'--pg-user=joe', a conninfo string of
	"host=postgres.mycompany.com password=secret" will result in the
	following being passed to the server:
+
--------------------------
  "host=postgres.mycompany.com password=secret user=joe dbname=myexp"
--------------------------
+
The default connection info string is "host=localhost" and the
default database user is "oml".
endif::have_pg[]

--logfile=file::
		Write log messages to file.

--usage::
		Print a brief usage message.

-v, --version::
		Print the version number of *oml2-server*.

-?, --help::
		Print a summary of options.

HOOK COMMANDS
-------------
The external event hook program should expect some of the following commands on
its standard input.

*EXIT*::
	Command the hook to cleanup and terminate. This command has no argument.

ENVIRONMENT VARIABLES
---------------------
OML_SQLITE_DIR::
Create SQLite3 experiment measurement databases in this directory.
This environment variable is overridden by the '--data-dir' command
line option.


BUGS
----
include::bugs.txt

SECURITY CONSIDERATIONS
-----------------------

*oml2-server* does not use any authentication, and should thus be
considered insecure.  It is intended to be deployed behind firewalls
on a dedicated testbed network.  It should not be run as a daemon on
an open network.  Future versions of OML may be re-designed to be
suitable for use in insecure environments.

SEE ALSO
--------
Manual Pages
~~~~~~~~~~~~
linkoml:oml2-proxy-server[1], linkoml:liboml2[1], linkoml:liboml2[3,api]

include::manual.txt

SQLite3
~~~~~~~
http://www.sqlite.org

ifdef::have_pg[]
PostgreSQL
~~~~~~~~~~
http://www.postgresql.org
endif::have_pg[]
