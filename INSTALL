OML : Orbit Measurment Library : Installation instructions
==========================================================

For users
---------

If you just want to use OML, you probably downloaded this package as a
tarball. The standard UNIX ./configure && make method works for this
package. Here's what to do:

$ tar xvfz oml2-2.x.x.tar.gz
$ cd oml2-2.x.x
$ ./configure --help

(to see the configuration options), and then:

$ ./configure [possible options]
$ make
$ make install							# As super user, or use sudo(1)

The most useful option to configure is the --prefix option, which allows
installation in a non-standard location. The default is /usr/local. If
you just use the default, the liboml2 library will be installed in
/usr/local/lib, and you should be able to link your programs against it
with a simple -loml2 on the command line to the linker. The server,
proxy server, and oml2_scaffold will be installed in /usr/local/bin, and
should be in your standard PATH. The example programs and the programs
in the app/ subdirectory will be installed in /usr/local/share/bin.

To install OML in your home directory, use:

$ ./configure --prefix=${HOME}/usr		# For example
$ make
$ make install

Then you will probably need to add ${HOME}/usr/lib to your
LD_LIBRARY_PATH environment variable. The 'make install' process will
print instructions on what to do. To run the server, add ${HOME}/usr/bin
to your PATH environment variable

By default the documentation will be built. The documentation is written
in Asciidoc markup language, so you'll need Asciidoc installed ('apt-get
install asciidoc' on Debian/Ubuntu). Code documentation based on Doxygen
markup is also generated. To disable building the documentation, use the
'--with-doc' option to the configure script. To only disable Doxygen
documentation, use the '--without-doxygen-doc' option.

$ ./configure --without-doc
$ make								# This now doesn't builds the docs
$ make install							# As super user, or use sudo(1)

The last command will install the man pages. Starting points in the
documentation are:

$ man 1 liboml2
$ man 3 liboml2
$ man 5 liboml2.conf

All functions in the API have their own man pages (see liboml2(3) for
starters).

For developers
--------------

If you want to modify or enhance OML, you probably checked out the
sources from the OML git repository at

$ git clone git://mytestbed.net/oml.git

In that case, in order to build the package you first need to generate
the configure script and Makefiles. To do this you need the Autotools
installed: Autoconf, Automake, and Libtool. If you use a Linux
distribution, these should all be available via your system's package
manager.

Once you have installed the Autotools you should be able to generate all
the necessary configuration and Makefiles by doing this:

$ cd oml2
$ ./autogen.sh

At this point you should be ready to run

$ ./configure && make && make install

as above.

If you want to run the test suite you will also need to install the
CHECK package (a unit testing framework) [0].  It's also available as a
Debian package in the standard Debian and Ubuntu repositories:

$ apt-get install check

If you don't install CHECK then the test suite won't be run, but OML
should still build and install correctly. To run the test suite, use the
'check' target:

$ make check

If you prefer to keep your executables, object files, and other
generated files in a separate tree, Automake supports a parallel build
using GNU Make's VPATH feature. For instance, to build in a subdirectory
called 'build', do the following:

$ cd oml2
$ mkdir build
$ cd build
$ ../configure [possible options]
$ make
$ make install							# As super user, or use sudo(1)

All the files generated by configure and make will be put under the
build directory. Automake recognizes that configure was run in a
directory different to the root of the source tree, and adjusts its
behaviour accordingly.

Finally, if you want to restore the tree to a clean state, without the
generated Makefile, Makefile.in, and copied Autoconf/Automake/Libtool
files, do this:

$ cd oml2
$ ./autoclean.sh

Once you do this, you'll have to follow the above procedure again to get
the tree into a state where you can build it.

Android builds
--------------

There are two way to build OML for an Android target.

The first method is to build from this source tree with the standard GNU
autotools approach, the android_configure.py is in charge of finding the
relevant paths given the root of an Android build tree, and calling the
configure script accordingly (it can be used in a VPATH build, which is
the recommended way described below). If building from a Git checkout,
you'll need to run the autogen.sh script first, as above.

Before you begin, you need a working Android build tree in which you
have already compiled an image (this has been tested with various
revision of CyanogenMod 9). The configure script will search it for
libraries it depends on.  By default android_configure.py assumes your
target device is full, but you can specify others as its firts argument
(e.g., crespo for Nexus S, umts_sholes for Milestone, etc.).

Unfortunately, the current CM9 source does not ship with all the
libraries that OML depends on. The popt library is missing. We provide a
separate Android source package for this library at [1].

$ cd /PATH/TO/src/cm4mm
$ tar xzvf libpopt_android.tar.gz
$ . build/envsetup.sh
...
$ mmm external/libpopt

The android_configure.py script finds the right cross-compilation
toolchain for you, but you need to extend your PATH so the compilation
process can find it too. For convenience, the script prints out the
command to do so.

$ cd oml2
$ mkdir build
$ cd build
$ ANDROID_BUILD_TOP=/PATH/TO/src/cm4mm ../android_configure.py
...

You need to extend your $PATH before running make:
PATH=/PATH/TO/cm4mm/prebuilt/linux-x86/toolchain/arm-linux-androideabi-4.4.x/bin:$PATH
$ PATH=/PATH/TO/cm4mm/prebuilt/linux-x86/toolchain/arm-linux-androideabi-4.4.x/bin:$PATH
$ make
$ make DESTDIR=$PWD/_inst install

The last command performs an install into a subdirectory _inst of the
current directory. The files are distributed following Android layout.
You can probably trim this install tree a bit, removing all the
system/usr part, as well as the *.la files in system/lib.


The second method consists in leveraging the Android build process. This
method requires a different set of source files, and cannot work with
your current tree. If you are working from a Git checkout, you can
generate this set of source files by running the following commands.

$ ./configure --enable-packaging
$ make pkg-and

This will create an archive named p-android/oml2-2.x.x-android.tar.gz.
Alternatively, you can find this archive at [1]. That fileset contains
both the OML and libpopt source, as well as a README.oml2 file
documenting the build process in more details. Please refer to it.


[0] http://check.sourceforge.net
[1] http://oml.mytestbed.net/attachments/download/744/libpopt_android.tar.gz
[2] http://oml.mytestbed.net/projects/oml/files
